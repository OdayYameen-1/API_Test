<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="SoapLibrary" type="LIBRARY" format="ROBOT" scope="SUITE" namedargs="true" generated="2021-03-18T08:41:29Z" specversion="2" source="C:\Users\OdayY\AppData\Local\Programs\Python\Python39\Lib\site-packages\SoapLibrary\__init__.py" lineno="5">
<version>0.6</version>
<scope>test suite</scope>
<namedargs>yes</namedargs>
<doc>    SoapLibrary is a library for testing SOAP-based web services.

    SoapLibrary is based on [https://python-zeep.readthedocs.io/en/master/|Zeep], a modern SOAP client for Python.

    This library is designed for those who want to work with webservice automation as if they were using SoapUI,
    make a request through an XML file, and receive the response in another XML file.

= Example =

| ***** Settings *****
| Library           SoapLibrary
| Library           OperatingSystem
|
| ***** Test Cases *****
| Example
|     Create Soap Client    http://endpoint.com/example.asmx?wsdl
|     ${response}    Call SOAP Method With XML    ${CURDIR}/request.xml
|     ${text}    Get Data From XML By Tag    ${response}    tag_name
|     Log    ${text}
|     Save XML To File    ${response}    ${CURDIR}    response_test</doc>
<kw name="Call SOAP Method" source="C:\Users\OdayY\AppData\Local\Programs\Python\Python39\Lib\site-packages\SoapLibrary\SoapLibrary.py" lineno="203">
<arguments>
<arg>name</arg>
<arg>*args</arg>
</arguments>
<doc>If the webservice have simple SOAP operation/method with few arguments, you can call the method with the given
`name` and `args`.

The first argument of the keyword  ``name``  is the operation name of the ``SOAP operation/method`` [https://www.soapui.org/soap-and-wsdl/operations-and-requests.html|More information here]

*Input Arguments:*
| *Name* | *Description* |
| name | Name of the SOAP operation/method |
| args | List of request entries |

*Example:*
| ${response}= | Call SOAP Method | operation_name | arg1 | arg2 |</doc>
</kw>
<kw name="Call SOAP Method With String XML" source="C:\Users\OdayY\AppData\Local\Programs\Python\Python39\Lib\site-packages\SoapLibrary\SoapLibrary.py" lineno="240">
<arguments>
<arg>string_xml</arg>
<arg>headers={'Content-Type': 'text/xml; charset=utf-8'}</arg>
</arguments>
<doc>Send an string representation of XML as a request to the SOAP client.
The SOAP method is inside the XML string.

*Input Arguments:*
| *Name* | *Description* |
| string_xml | string representation of XML |
| headers | dictionary with request headers. Default ``{'Content-Type': 'text/xml; charset=utf-8'}`` |

*Example:*
| ${response}= | Call SOAP Method With String XML |  "&lt;sample&gt;&lt;Id&gt;1&lt;/Id&gt;&lt;/sample&gt;" |</doc>
</kw>
<kw name="Call SOAP Method With XML" source="C:\Users\OdayY\AppData\Local\Programs\Python\Python39\Lib\site-packages\SoapLibrary\SoapLibrary.py" lineno="51">
<arguments>
<arg>xml</arg>
<arg>headers={'Content-Type': 'text/xml; charset=utf-8'}</arg>
</arguments>
<doc>Send an XML file as a request to the SOAP client. The path to the Request XML file is required as argument,
the SOAP method is inside the XML file.

*Input Arguments:*
| *Name* | *Description* |
| xml | file path to xml file |
| headers | dictionary with request headers. Default ``{'Content-Type': 'text/xml; charset=utf-8'}`` |

*Example:*
| ${response}= | Call SOAP Method With XML |  C:\Request.xml |</doc>
</kw>
<kw name="Convert XML Response to Dictionary" source="C:\Users\OdayY\AppData\Local\Programs\Python\Python39\Lib\site-packages\SoapLibrary\SoapLibrary.py" lineno="171">
<arguments>
<arg>xml_etree</arg>
</arguments>
<doc>Convert the webservice response into a dictionary.

*Input Arguments:*
| *Name* | *Description* |
| xml_etree | etree object of the xml to convert to dictionary |

*Example:*
| ${dict_response}= | Convert XML Response to Dictionary | ${response} |</doc>
</kw>
<kw name="Create SOAP Client" source="C:\Users\OdayY\AppData\Local\Programs\Python\Python39\Lib\site-packages\SoapLibrary\SoapLibrary.py" lineno="29">
<arguments>
<arg>url</arg>
<arg>ssl_verify=True</arg>
</arguments>
<doc>Loads a WSDL from the given URL and creates a Zeep client.
List all Available operations/methods with INFO log level.

*Input Arguments:*
| *Name* | *Description* |
| url | wsdl url |

*Example:*
| Create SOAP Client | http://endpoint.com?wsdl |</doc>
</kw>
<kw name="Decode Base64" source="C:\Users\OdayY\AppData\Local\Programs\Python\Python39\Lib\site-packages\SoapLibrary\SoapLibrary.py" lineno="223">
<arguments>
<arg>response</arg>
</arguments>
<doc>Decodes texts that are base64 encoded.

Returns the decoded response

*Input Arguments:*
| *Name* | *Description* |
| response | Response of the webservice coded in base64 |

*Example:*
| ${response_decoded}= | Decode Base64 | ${response} |</doc>
</kw>
<kw name="Edit XML Request" source="C:\Users\OdayY\AppData\Local\Programs\Python\Python39\Lib\site-packages\SoapLibrary\SoapLibrary.py" lineno="107">
<arguments>
<arg>xml_file_path</arg>
<arg>new_values_dict</arg>
<arg>edited_request_name</arg>
<arg>repeated_tags=All</arg>
</arguments>
<doc>Changes a field on the given XML to a new given value, the values must be in a dictionary.
xml_filepath must be a "template" of the request to the webservice.
new_values_dict must be a dictionary with the keys and values to change.
request_name will be the name of the new XMl file generated with the changed request.


If there is a tag that appears more than once, all occurrences will be replaced by the new value by defaul.
If you want to change a specific tag, inform the occurrence number in the repeated_tags argument.

Returns the file path of the new Request file.

*Input Arguments:*
| *Name* | *Description* |
| xml_file_path | file path to xml file |
| new_values_dict | dictionary with tags as keys and tag value as value |
| edited_request_name |  name of the new XMl file generated with the changed request |
| repeated_tags |  Occurrence number of the repeated tag to change value |

*Example*:
| ${dict}= | Create Dictionary | tag_name1=SomeText | tag_name2=OtherText |
| ${xml_edited}= | Edit XML Request | request_filepath | ${dict} | New_Request |
| ${xml_edited}= | Edit XML Request | request_filepath | ${dict} | New_Request | repeated_tags=0 |</doc>
</kw>
<kw name="Get Data From XML By Tag" source="C:\Users\OdayY\AppData\Local\Programs\Python\Python39\Lib\site-packages\SoapLibrary\SoapLibrary.py" lineno="76">
<arguments>
<arg>xml</arg>
<arg>tag</arg>
<arg>index=1</arg>
</arguments>
<doc>Gets data from XML using a given tag. If the tag returns zero or more than one result, it will show a warning.
The xml argument must be an etree object, can be used with the return of the keyword `Call SOAP Method With XML`.

Returns the string representation of the value.

*Input Arguments:*
| *Name* | *Description* |
| xml | xml etree object |
| tag | tag to get value from |
| index | tag index if there are multiple tags with the same name, starting at 1. Default is set to 1 |

*Examples:*
| ${response}= | Call SOAP Method With XML |  C:\Request.xml |
| ${value}= | Get Data From XML By Tag |  ${response} | SomeTag |
| ${value}= | Get Data From XML By Tag |  ${response} | SomeTag | index=9 |</doc>
</kw>
<kw name="Save XML To File" source="C:\Users\OdayY\AppData\Local\Programs\Python\Python39\Lib\site-packages\SoapLibrary\SoapLibrary.py" lineno="152">
<arguments>
<arg>etree_xml</arg>
<arg>save_folder</arg>
<arg>file_name</arg>
</arguments>
<doc>Save the webservice response as a XML file.

Returns the file path of the newly created xml file.

*Input Arguments:*
| *Name* | *Description* |
| etree_xml | etree object of the xml |
| save_folder | directory to save the new file |
| file_name | name of the new xml file without .xml |

*Example*:
| ${response_file}= | Save XML To File |  ${response} | ${CURDIR} | response_file_name |</doc>
</kw>
</keywordspec>